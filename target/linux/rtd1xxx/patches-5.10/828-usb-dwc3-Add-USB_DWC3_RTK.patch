diff -uNr a/drivers/usb/dwc3/core.c b/drivers/usb/dwc3/core.c
--- a/drivers/usb/dwc3/core.c	2023-03-01 02:55:34.188000000 +0800
+++ b/drivers/usb/dwc3/core.c	2023-03-01 03:15:15.144000000 +0800
@@ -318,6 +318,23 @@
 
 	return 0;
 }
+EXPORT_SYMBOL(dwc3_core_soft_reset);
+EXPORT_SYMBOL(dwc3_set_prtcap);
+
+#if (IS_ENABLED(CONFIG_USB_DWC3_HOST) | (IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)))
+EXPORT_SYMBOL(dwc3_host_init);
+EXPORT_SYMBOL(dwc3_host_exit);
+#endif
+
+#if (IS_ENABLED(CONFIG_USB_DWC3_GADGET) | (IS_ENABLED(CONFIG_USB_DWC3_DUAL_ROLE)))
+EXPORT_SYMBOL(dwc3_gadget_init);
+EXPORT_SYMBOL(dwc3_gadget_exit);
+#endif
+
+EXPORT_SYMBOL(__traceiter_dwc3_writel);
+EXPORT_SYMBOL(__traceiter_dwc3_readl);
+EXPORT_SYMBOL(__tracepoint_dwc3_writel);
+EXPORT_SYMBOL(__tracepoint_dwc3_readl);
 
 /*
  * dwc3_frame_length_adjustment - Adjusts frame length if required
@@ -977,6 +994,9 @@
 		dwc->phys_ready = true;
 	}
 
+	reg = dwc3_readl(dwc->regs, DWC3_GCTL);
+	dwc3_writel(dwc->regs, DWC3_GCTL, reg | DWC3_GCTL_DSBLCLKGTNG);
+
 	usb_phy_init(dwc->usb2_phy);
 	usb_phy_init(dwc->usb3_phy);
 	ret = phy_init(dwc->usb2_generic_phy);
@@ -993,6 +1013,8 @@
 	if (ret)
 		goto err1;
 
+	dwc3_writel(dwc->regs, DWC3_GCTL, reg);
+
 	if (hw_mode == DWC3_GHWPARAMS0_MODE_DRD &&
 	    !DWC3_VER_IS_WITHIN(DWC3, ANY, 194A)) {
 		if (!dwc->dis_u3_susphy_quirk) {
@@ -1036,6 +1058,21 @@
 		goto err4;
 	}
 
+	switch (dwc->dr_mode) {
+	case USB_DR_MODE_PERIPHERAL:
+		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_DEVICE);
+		break;
+	case USB_DR_MODE_HOST:
+		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_HOST);
+		break;
+	case USB_DR_MODE_OTG:
+		dwc3_set_prtcap(dwc, DWC3_GCTL_PRTCAP_OTG);
+		break;
+	default:
+		dev_warn(dwc->dev, "Unsupported mode %d\n", dwc->dr_mode);
+		break;
+	}
+
 	/*
 	 * ENDXFER polling is available on version 3.10a and later of
 	 * the DWC_usb3 controller. It is NOT available in the
@@ -1060,6 +1097,12 @@
 		if (dwc->dis_tx_ipgap_linecheck_quirk)
 			reg |= DWC3_GUCTL1_TX_IPGAP_LINECHECK_DIS;
 
+		if (dwc->dev_force_20_clk_for_30_clk)
+			reg |= DWC3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK;
+
+		if (dwc->parkmode_disable_hs_quirk)
+			reg |= DWC3_GUCTL1_PARKMODE_DISABLE_HS;
+
 		if (dwc->parkmode_disable_ss_quirk)
 			reg |= DWC3_GUCTL1_PARKMODE_DISABLE_SS;
 
@@ -1376,6 +1419,10 @@
 				"snps,dis-u2-freeclk-exists-quirk");
 	dwc->dis_del_phy_power_chg_quirk = device_property_read_bool(dev,
 				"snps,dis-del-phy-power-chg-quirk");
+	dwc->dev_force_20_clk_for_30_clk = device_property_read_bool(dev,
+				"snps,dev_force_20_clk_for_30_clk");
+	dwc->parkmode_disable_hs_quirk = device_property_read_bool(dev,
+				"snps,parkmode-disable-hs-quirk");
 	dwc->dis_tx_ipgap_linecheck_quirk = device_property_read_bool(dev,
 				"snps,dis-tx-ipgap-linecheck-quirk");
 	dwc->parkmode_disable_ss_quirk = device_property_read_bool(dev,
@@ -1519,6 +1566,19 @@
 	dwc_res = *res;
 	dwc_res.start += DWC3_GLOBALS_REGS_START;
 
+	/* For some dwc3 controller, the dwc3 global register start address is
+	 * not at DWC3_GLOBALS_REGS_START (0xc100).
+	 */
+	device_property_read_u32(dev, "snps,fixed_dwc3_globals_regs_start",
+				 &dwc->fixed_dwc3_globals_regs_start);
+	if (dwc->fixed_dwc3_globals_regs_start) {
+		dwc_res.start -= DWC3_GLOBALS_REGS_START;
+		dwc_res.start += dwc->fixed_dwc3_globals_regs_start;
+		dev_info(dev,
+		    "fixed dwc3 globals register start address from 0x%x to end 0x%x\n",
+		    (int)dwc_res.start, (int)dwc_res.end);
+	}
+
 	regs = devm_ioremap_resource(dev, &dwc_res);
 	if (IS_ERR(regs))
 		return PTR_ERR(regs);
diff -uNr a/drivers/usb/dwc3/core.h b/drivers/usb/dwc3/core.h
--- a/drivers/usb/dwc3/core.h	2023-02-28 21:44:23.792000000 +0800
+++ b/drivers/usb/dwc3/core.h	2023-03-01 03:08:20.628000000 +0800
@@ -200,6 +200,11 @@
 #define DWC3_EVENTQ		7
 #define DWC3_AUXEVENTQ		8
 
+/* Global TX Threshold Configuration Register */
+#define DWC3_GTXTHRCFG_MAXTXBURSTSIZE(n) (((n) & 0xff) << 16)
+#define DWC3_GTXTHRCFG_TXPKTCNT(n) (((n) & 0xf) << 24)
+#define DWC3_GTXTHRCFG_PKTCNTSEL BIT(29)
+
 /* Global RX Threshold Configuration Register */
 #define DWC3_GRXTHRCFG_MAXRXBURSTSIZE(n) (((n) & 0x1f) << 19)
 #define DWC3_GRXTHRCFG_RXPKTCNT(n) (((n) & 0xf) << 24)
@@ -253,8 +258,10 @@
 #define DWC3_GUCTL_HSTINAUTORETRY	BIT(14)
 
 /* Global User Control 1 Register */
+#define DWC3_GUCTL1_PARKMODE_DISABLE_HS	BIT(16)
 #define DWC3_GUCTL1_PARKMODE_DISABLE_SS	BIT(17)
 #define DWC3_GUCTL1_TX_IPGAP_LINECHECK_DIS	BIT(28)
+#define DWC3_GUCTL1_DEV_FORCE_20_CLK_FOR_30_CLK BIT(26)
 #define DWC3_GUCTL1_DEV_L1_EXIT_BY_HW	BIT(24)
 
 /* Global Status Register */
@@ -554,6 +561,10 @@
 #define DWC3_DEV_IMOD_INTERVAL_SHIFT	0
 #define DWC3_DEV_IMOD_INTERVAL_MASK	(0xffff << 0)
 
+#if 1 // USB_PATCH_BY_RTK
+#define DWC3_DEVICE_IMODI(n)		((0xffff & (n)))
+#endif // USB_PATCH_BY_RTK
+
 /* OTG Configuration Register */
 #define DWC3_OCFG_DISPWRCUTTOFF		BIT(5)
 #define DWC3_OCFG_HIBDISMASK		BIT(4)
@@ -1254,6 +1265,8 @@
 	unsigned		dis_u2_freeclk_exists_quirk:1;
 	unsigned		dis_del_phy_power_chg_quirk:1;
 	unsigned		dis_tx_ipgap_linecheck_quirk:1;
+	unsigned		dev_force_20_clk_for_30_clk:1;
+	unsigned		parkmode_disable_hs_quirk:1;
 	unsigned		parkmode_disable_ss_quirk:1;
 
 	unsigned		tx_de_emphasis_quirk:1;
@@ -1264,6 +1277,7 @@
 	unsigned		dis_split_quirk:1;
 
 	u16			imod_interval;
+	u32			fixed_dwc3_globals_regs_start;
 };
 
 #define INCRX_BURST_MODE 0
@@ -1431,6 +1445,7 @@
 void dwc3_set_prtcap(struct dwc3 *dwc, u32 mode);
 void dwc3_set_mode(struct dwc3 *dwc, u32 mode);
 u32 dwc3_core_fifo_space(struct dwc3_ep *dep, u8 type);
+int dwc3_core_soft_reset(struct dwc3 *dwc);
 
 #define DWC3_IP_IS(_ip)							\
 	(dwc->ip == _ip##_IP)
diff -uNr a/drivers/usb/dwc3/gadget.c b/drivers/usb/dwc3/gadget.c
--- a/drivers/usb/dwc3/gadget.c	2023-03-01 00:12:06.440000000 +0800
+++ b/drivers/usb/dwc3/gadget.c	2023-03-01 03:10:41.748000000 +0800
@@ -2389,6 +2389,9 @@
 	}
 
 	dwc->gadget_driver	= driver;
+
+	dwc->link_state = 0;
+
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
 	return 0;
@@ -2415,6 +2418,7 @@
 
 	spin_lock_irqsave(&dwc->lock, flags);
 	dwc->gadget_driver	= NULL;
+	dwc->link_state = 0;
 	spin_unlock_irqrestore(&dwc->lock, flags);
 
 	free_irq(dwc->irq_gadget, dwc->ev_buf);
@@ -4033,6 +4037,7 @@
 		return;
 
 	usb_del_gadget(dwc->gadget);
+	dwc->gadget->udc = NULL;
 	dwc3_gadget_free_endpoints(dwc);
 	usb_put_gadget(dwc->gadget);
 	dma_free_coherent(dwc->sysdev, DWC3_BOUNCE_SIZE, dwc->bounce,
@@ -4040,6 +4045,8 @@
 	kfree(dwc->setup_buf);
 	dma_free_coherent(dwc->sysdev, sizeof(*dwc->ep0_trb) * 2,
 			  dwc->ep0_trb, dwc->ep0_trb_addr);
+
+	dwc->gadget = NULL;
 }
 
 int dwc3_gadget_suspend(struct dwc3 *dwc)
diff -uNr a/drivers/usb/dwc3/Kconfig b/drivers/usb/dwc3/Kconfig
--- a/drivers/usb/dwc3/Kconfig	2023-03-01 00:18:50.120000000 +0800
+++ b/drivers/usb/dwc3/Kconfig	2023-03-01 00:25:41.560000000 +0800
@@ -73,7 +73,7 @@
 	  say 'Y' or 'M' if you have such device.
 
 config USB_DWC3_RTK_TYPE_C
-	bool "RTK DWC3 Type C Driver (dynamical host/device mode switch)"
+	tristate "RTK DWC3 Type C Driver (dynamical host/device mode switch)"
 	default USB_DWC3_RTK if (USB_DWC3_DUAL_ROLE)
 	depends on USB_DWC3_DUAL_ROLE
 	help
diff -uNr a/drivers/usb/dwc3/Makefile b/drivers/usb/dwc3/Makefile
--- a/drivers/usb/dwc3/Makefile	2023-03-01 00:19:04.568000000 +0800
+++ b/drivers/usb/dwc3/Makefile	2023-03-01 00:19:31.524000000 +0800
@@ -51,3 +51,8 @@
 obj-$(CONFIG_USB_DWC3_OF_SIMPLE)	+= dwc3-of-simple.o
 obj-$(CONFIG_USB_DWC3_ST)		+= dwc3-st.o
 obj-$(CONFIG_USB_DWC3_QCOM)		+= dwc3-qcom.o
+obj-$(CONFIG_USB_DWC3_RTK)		+= dwc3-rtk.o
+obj-$(CONFIG_USB_DWC3_RTK)		+= dwc3-rtk-debugfs.o
+obj-$(CONFIG_USB_DWC3_RTK_DUAL_ROLE)	+= dwc3-rtk-drd.o
+obj-$(CONFIG_USB_DWC3_RTK_TYPE_C)	+= dwc3-rtk-type_c.o
+obj-$(CONFIG_USB_TYPE_C_RTK_RTS5400) += rtk-rts5400.o
\ 文件尾没有换行符
